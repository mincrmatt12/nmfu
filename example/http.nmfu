// Comments specified in c++ style because it looks better (fight me)

// Example HTTP parser, which grabs a few headers

out str[32] url;
out bool accept_gzip = false;
out bool has_etag = false;
out str[32] etag;
out enum{GET,POST} method;
out enum{OK,BADR,URLL,ETAGL,BADM} result;
out int content_size = 0;

// "subroutine"-esque functionality. duplicate states are optimized out.
//
// Effectively just substitudes into the ast at the appropriate point.
macro waitend {
    wait "\r\n\r\n";
}

// optional space as in the spec
macro ows {
    optional {" ";}
}

parser { // declare the actual parser
	result = BADR;

    // Each "statement" here is an instruction to the parser. They are followed sequentially.

    // Try-catch: add custom error handling behavior. If a parse match error occurs, it will jump to the catch statement.
    try {
        // Case statement: most simple kind of conditional
        // Specific match patterns comma separated correspond to actions to be taken.
        // The special type `else` matches anything not already matched.
        // `end` already exists as a keyword.

        case {
            "GET" -> {method = GET;}
            "POST" -> {method = POST;}
            // no else here, so invalid methods will fall back to the catch. We _could_ add a seperate case which sets result as an enum here
            else -> {
                result = BADM;
                waitend();
                finish;
            }
        }

        " "; // match a space

        // The more common method of reading "arbitrary" input:

        try {
            url += /[\/a-zA-Z0-9.\-_?=&+]+/;
        }
        catch (outofspace) {
            waitend();
            result = URLL;
            finish;
        }
        // Also note that there's an implicit maximum length here. Violating this will trigger an "outofspace" type error (it is possible to provide a comma separated list of exceptions
        // to handle for a catch).

        " HTTP/1.1\r\n"; // Match the http version and CRLF

        // Now we try and parse headers.
        // To do this, we utilize a loop.
        // Loops run forever until encountering a break. To break out of separate loops it is possible to give them names (`loop my_loop` and `break my_loop`.)

        loop {
            // The context here is immediately after a CRLF, so getting another one would indicate the end of the request / beginning of the body.
            case {
                "\r\n" -> {break;} // end the request header parse loop;
                "If-None-Match:"i -> {
                    ows();
                    // store an etag

                    has_etag = true;
                    try {
                        etag += /([wW]\/)?"([^"]*)"/; // note is is possible to write a regex as /<re>/[<group number>] to only select a specific group.
                    }
                    catch (outofspace) {
                        waitend();
                        result = ETAGL;
                        finish;
                    }

                    optional { // optional statement, must be decideable at the first character, although this is subject to change and may become similar to 
                        // case statements.
                        /(,\ ?([wW]\/)?"[^"]*")+/; // match extra etags, we only want the first one.
                    }

                    "\r\n";
                }
                "Accept-Encoding:"i -> {
                    // try and find "gzip" in a comma separated list
                    loop {
                        case {
                            /\ *gzip/ -> {accept_gzip = true;}
                            "\r\n" -> {break;}
                            else -> {wait ",";}
                        }
                    }
                }
                "Content-Length:"i -> {
                    ows();
                    foreach {
                        /\d+/;
                    } do {
                        content_size = [content_size * 10 + ($last - 48)]; // math
                    }
                    "\r\n";
                }
                else -> {
                    // Wait for a newline.
                    // The wait command "eats" input values until the target value is found, eating it as well.
                    wait "\r\n";
                }
            }
        }

        // Body parsing is left to the end user.
        result = OK;
    }
    catch {
        waitend();
        result = BADR;
        finish; // Finish parsing (returns status code "DONE" from the parser function)
    }
}
